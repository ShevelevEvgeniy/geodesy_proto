// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/dto/rover.proto

package dto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _rover_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterRoverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRoverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRoverRequestMultiError, or nil if none found.
func (m *RegisterRoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := RegisterRoverRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	if m.GetMaxDistanceKm() <= 0 {
		err := RegisterRoverRequestValidationError{
			field:  "MaxDistanceKm",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRoverRequestMultiError(errors)
	}

	return nil
}

// RegisterRoverRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterRoverRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterRoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRoverRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRoverRequestMultiError) AllErrors() []error { return m }

// RegisterRoverRequestValidationError is the validation error returned by
// RegisterRoverRequest.Validate if the designated constraints aren't met.
type RegisterRoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRoverRequestValidationError) ErrorName() string {
	return "RegisterRoverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRoverRequestValidationError{}

// Validate checks the field values on RegisterRoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRoverResponseMultiError, or nil if none found.
func (m *RegisterRoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := RegisterRoverResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRoverResponseMultiError(errors)
	}

	return nil
}

// RegisterRoverResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterRoverResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterRoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRoverResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRoverResponseMultiError) AllErrors() []error { return m }

// RegisterRoverResponseValidationError is the validation error returned by
// RegisterRoverResponse.Validate if the designated constraints aren't met.
type RegisterRoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRoverResponseValidationError) ErrorName() string {
	return "RegisterRoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRoverResponseValidationError{}

// Validate checks the field values on RoverID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoverID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoverID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoverIDMultiError, or nil if none found.
func (m *RoverID) ValidateAll() error {
	return m.validate(true)
}

func (m *RoverID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RoverIDValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoverIDMultiError(errors)
	}

	return nil
}

func (m *RoverID) _validateUuid(uuid string) error {
	if matched := _rover_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RoverIDMultiError is an error wrapping multiple validation errors returned
// by RoverID.ValidateAll() if the designated constraints aren't met.
type RoverIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoverIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoverIDMultiError) AllErrors() []error { return m }

// RoverIDValidationError is the validation error returned by RoverID.Validate
// if the designated constraints aren't met.
type RoverIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoverIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoverIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoverIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoverIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoverIDValidationError) ErrorName() string { return "RoverIDValidationError" }

// Error satisfies the builtin error interface
func (e RoverIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoverID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoverIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoverIDValidationError{}

// Validate checks the field values on DeregisterRoverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeregisterRoverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterRoverResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeregisterRoverResponseMultiError, or nil if none found.
func (m *DeregisterRoverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterRoverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := DeregisterRoverResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeregisterRoverResponseMultiError(errors)
	}

	return nil
}

// DeregisterRoverResponseMultiError is an error wrapping multiple validation
// errors returned by DeregisterRoverResponse.ValidateAll() if the designated
// constraints aren't met.
type DeregisterRoverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterRoverResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterRoverResponseMultiError) AllErrors() []error { return m }

// DeregisterRoverResponseValidationError is the validation error returned by
// DeregisterRoverResponse.Validate if the designated constraints aren't met.
type DeregisterRoverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterRoverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterRoverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterRoverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterRoverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterRoverResponseValidationError) ErrorName() string {
	return "DeregisterRoverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterRoverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterRoverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterRoverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterRoverResponseValidationError{}

// Validate checks the field values on RoverRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoverRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoverRequestMultiError, or
// nil if none found.
func (m *RoverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRoverId()); err != nil {
		err = RoverRequestValidationError{
			field:  "RoverId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLatitude(); val < -90 || val > 90 {
		err := RoverRequestValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val > 180 {
		err := RoverRequestValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Altitude

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoverRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoverRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoverRequestValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetGnssData()) < 1 {
		err := RoverRequestValidationError{
			field:  "GnssData",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoverRequestMultiError(errors)
	}

	return nil
}

func (m *RoverRequest) _validateUuid(uuid string) error {
	if matched := _rover_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RoverRequestMultiError is an error wrapping multiple validation errors
// returned by RoverRequest.ValidateAll() if the designated constraints aren't met.
type RoverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoverRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoverRequestMultiError) AllErrors() []error { return m }

// RoverRequestValidationError is the validation error returned by
// RoverRequest.Validate if the designated constraints aren't met.
type RoverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoverRequestValidationError) ErrorName() string { return "RoverRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoverRequestValidationError{}

// Validate checks the field values on CorrectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CorrectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CorrectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CorrectionResponseMultiError, or nil if none found.
func (m *CorrectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CorrectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCorrectionData()) < 1 {
		err := CorrectionResponseValidationError{
			field:  "CorrectionData",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGeneratedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CorrectionResponseValidationError{
					field:  "GeneratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CorrectionResponseValidationError{
					field:  "GeneratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeneratedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CorrectionResponseValidationError{
				field:  "GeneratedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CorrectionResponseMultiError(errors)
	}

	return nil
}

// CorrectionResponseMultiError is an error wrapping multiple validation errors
// returned by CorrectionResponse.ValidateAll() if the designated constraints
// aren't met.
type CorrectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CorrectionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CorrectionResponseMultiError) AllErrors() []error { return m }

// CorrectionResponseValidationError is the validation error returned by
// CorrectionResponse.Validate if the designated constraints aren't met.
type CorrectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorrectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorrectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorrectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorrectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorrectionResponseValidationError) ErrorName() string {
	return "CorrectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CorrectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorrectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorrectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorrectionResponseValidationError{}
