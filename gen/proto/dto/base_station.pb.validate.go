// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/dto/base_station.proto

package dto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _base_station_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on BaseStationInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BaseStationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseStationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BaseStationInfoMultiError, or nil if none found.
func (m *BaseStationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseStationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = BaseStationInfoValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := BaseStationInfoValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLatitude(); val < -90 || val > 90 {
		err := BaseStationInfoValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val > 180 {
		err := BaseStationInfoValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Altitude

	if utf8.RuneCountInString(m.GetAntennaType()) < 1 {
		err := BaseStationInfoValidationError{
			field:  "AntennaType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAntennaHeight() < 0 {
		err := BaseStationInfoValidationError{
			field:  "AntennaHeight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiverType()) < 1 {
		err := BaseStationInfoValidationError{
			field:  "ReceiverType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiverSerial()) < 1 {
		err := BaseStationInfoValidationError{
			field:  "ReceiverSerial",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFirmwareVersion()) < 1 {
		err := BaseStationInfoValidationError{
			field:  "FirmwareVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetConstellations()) < 1 {
		err := BaseStationInfoValidationError{
			field:  "Constellations",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := BaseStationStatus_name[int32(m.GetStatus())]; !ok {
		err := BaseStationInfoValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLastCalibratedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseStationInfoValidationError{
					field:  "LastCalibratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseStationInfoValidationError{
					field:  "LastCalibratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastCalibratedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseStationInfoValidationError{
				field:  "LastCalibratedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInstalledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseStationInfoValidationError{
					field:  "InstalledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseStationInfoValidationError{
					field:  "InstalledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstalledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseStationInfoValidationError{
				field:  "InstalledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := CoordinateSystem_name[int32(m.GetCoordinateSystem())]; !ok {
		err := BaseStationInfoValidationError{
			field:  "CoordinateSystem",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CoordinateSubsystem

	if len(errors) > 0 {
		return BaseStationInfoMultiError(errors)
	}

	return nil
}

func (m *BaseStationInfo) _validateUuid(uuid string) error {
	if matched := _base_station_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BaseStationInfoMultiError is an error wrapping multiple validation errors
// returned by BaseStationInfo.ValidateAll() if the designated constraints
// aren't met.
type BaseStationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseStationInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseStationInfoMultiError) AllErrors() []error { return m }

// BaseStationInfoValidationError is the validation error returned by
// BaseStationInfo.Validate if the designated constraints aren't met.
type BaseStationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseStationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseStationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseStationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseStationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseStationInfoValidationError) ErrorName() string { return "BaseStationInfoValidationError" }

// Error satisfies the builtin error interface
func (e BaseStationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseStationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseStationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseStationInfoValidationError{}

// Validate checks the field values on BaseStationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BaseStationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseStationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BaseStationResponseMultiError, or nil if none found.
func (m *BaseStationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseStationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := BaseStationResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBaseStationInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseStationResponseValidationError{
					field:  "BaseStationInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseStationResponseValidationError{
					field:  "BaseStationInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseStationInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseStationResponseValidationError{
				field:  "BaseStationInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BaseStationResponseMultiError(errors)
	}

	return nil
}

// BaseStationResponseMultiError is an error wrapping multiple validation
// errors returned by BaseStationResponse.ValidateAll() if the designated
// constraints aren't met.
type BaseStationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseStationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseStationResponseMultiError) AllErrors() []error { return m }

// BaseStationResponseValidationError is the validation error returned by
// BaseStationResponse.Validate if the designated constraints aren't met.
type BaseStationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseStationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseStationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseStationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseStationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseStationResponseValidationError) ErrorName() string {
	return "BaseStationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BaseStationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseStationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseStationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseStationResponseValidationError{}

// Validate checks the field values on ActivateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateRequestMultiError, or nil if none found.
func (m *ActivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBaseStationId()); err != nil {
		err = ActivateRequestValidationError{
			field:  "BaseStationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ActivateRequestMultiError(errors)
	}

	return nil
}

func (m *ActivateRequest) _validateUuid(uuid string) error {
	if matched := _base_station_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ActivateRequestMultiError is an error wrapping multiple validation errors
// returned by ActivateRequest.ValidateAll() if the designated constraints
// aren't met.
type ActivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateRequestMultiError) AllErrors() []error { return m }

// ActivateRequestValidationError is the validation error returned by
// ActivateRequest.Validate if the designated constraints aren't met.
type ActivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateRequestValidationError) ErrorName() string { return "ActivateRequestValidationError" }

// Error satisfies the builtin error interface
func (e ActivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateRequestValidationError{}

// Validate checks the field values on DeactivateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeactivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateRequestMultiError, or nil if none found.
func (m *DeactivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetBaseStationId()); err != nil {
		err = DeactivateRequestValidationError{
			field:  "BaseStationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeactivateRequestMultiError(errors)
	}

	return nil
}

func (m *DeactivateRequest) _validateUuid(uuid string) error {
	if matched := _base_station_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeactivateRequestMultiError is an error wrapping multiple validation errors
// returned by DeactivateRequest.ValidateAll() if the designated constraints
// aren't met.
type DeactivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateRequestMultiError) AllErrors() []error { return m }

// DeactivateRequestValidationError is the validation error returned by
// DeactivateRequest.Validate if the designated constraints aren't met.
type DeactivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateRequestValidationError) ErrorName() string {
	return "DeactivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateRequestValidationError{}

// Validate checks the field values on BaseStationList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BaseStationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseStationList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BaseStationListMultiError, or nil if none found.
func (m *BaseStationList) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseStationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetBaseStations()) < 1 {
		err := BaseStationListValidationError{
			field:  "BaseStations",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBaseStations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BaseStationListValidationError{
						field:  fmt.Sprintf("BaseStations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BaseStationListValidationError{
						field:  fmt.Sprintf("BaseStations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BaseStationListValidationError{
					field:  fmt.Sprintf("BaseStations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BaseStationListMultiError(errors)
	}

	return nil
}

// BaseStationListMultiError is an error wrapping multiple validation errors
// returned by BaseStationList.ValidateAll() if the designated constraints
// aren't met.
type BaseStationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseStationListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseStationListMultiError) AllErrors() []error { return m }

// BaseStationListValidationError is the validation error returned by
// BaseStationList.Validate if the designated constraints aren't met.
type BaseStationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseStationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseStationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseStationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseStationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseStationListValidationError) ErrorName() string { return "BaseStationListValidationError" }

// Error satisfies the builtin error interface
func (e BaseStationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseStationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseStationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseStationListValidationError{}
