// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/api/coord_correction_v1/coord_correction.proto

package coord_correction_v1

import (
	context "context"
	dto "github.com/ShevelevEvgeniy/geodesy_proto/gen/proto/dto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoordinatesCorrectionService_StreamCorrections_FullMethodName = "/coord_correction_v1.CoordinatesCorrectionService/StreamCorrections"
)

// CoordinatesCorrectionServiceClient is the client API for CoordinatesCorrectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatesCorrectionServiceClient interface {
	StreamCorrections(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[dto.RoverRequest, dto.CorrectionResponse], error)
}

type coordinatesCorrectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatesCorrectionServiceClient(cc grpc.ClientConnInterface) CoordinatesCorrectionServiceClient {
	return &coordinatesCorrectionServiceClient{cc}
}

func (c *coordinatesCorrectionServiceClient) StreamCorrections(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[dto.RoverRequest, dto.CorrectionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CoordinatesCorrectionService_ServiceDesc.Streams[0], CoordinatesCorrectionService_StreamCorrections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[dto.RoverRequest, dto.CorrectionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoordinatesCorrectionService_StreamCorrectionsClient = grpc.BidiStreamingClient[dto.RoverRequest, dto.CorrectionResponse]

// CoordinatesCorrectionServiceServer is the server API for CoordinatesCorrectionService service.
// All implementations must embed UnimplementedCoordinatesCorrectionServiceServer
// for forward compatibility.
type CoordinatesCorrectionServiceServer interface {
	StreamCorrections(grpc.BidiStreamingServer[dto.RoverRequest, dto.CorrectionResponse]) error
	mustEmbedUnimplementedCoordinatesCorrectionServiceServer()
}

// UnimplementedCoordinatesCorrectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatesCorrectionServiceServer struct{}

func (UnimplementedCoordinatesCorrectionServiceServer) StreamCorrections(grpc.BidiStreamingServer[dto.RoverRequest, dto.CorrectionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCorrections not implemented")
}
func (UnimplementedCoordinatesCorrectionServiceServer) mustEmbedUnimplementedCoordinatesCorrectionServiceServer() {
}
func (UnimplementedCoordinatesCorrectionServiceServer) testEmbeddedByValue() {}

// UnsafeCoordinatesCorrectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatesCorrectionServiceServer will
// result in compilation errors.
type UnsafeCoordinatesCorrectionServiceServer interface {
	mustEmbedUnimplementedCoordinatesCorrectionServiceServer()
}

func RegisterCoordinatesCorrectionServiceServer(s grpc.ServiceRegistrar, srv CoordinatesCorrectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatesCorrectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoordinatesCorrectionService_ServiceDesc, srv)
}

func _CoordinatesCorrectionService_StreamCorrections_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoordinatesCorrectionServiceServer).StreamCorrections(&grpc.GenericServerStream[dto.RoverRequest, dto.CorrectionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoordinatesCorrectionService_StreamCorrectionsServer = grpc.BidiStreamingServer[dto.RoverRequest, dto.CorrectionResponse]

// CoordinatesCorrectionService_ServiceDesc is the grpc.ServiceDesc for CoordinatesCorrectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatesCorrectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coord_correction_v1.CoordinatesCorrectionService",
	HandlerType: (*CoordinatesCorrectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCorrections",
			Handler:       _CoordinatesCorrectionService_StreamCorrections_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api/coord_correction_v1/coord_correction.proto",
}
