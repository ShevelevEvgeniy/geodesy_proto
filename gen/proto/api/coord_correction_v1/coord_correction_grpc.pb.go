// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/api/coord_correction_v1/coord_correction.proto

package coord_correction_v1

import (
	context "context"
	dto "github.com/ShevelevEvgeniy/geodesy_proto/proto/dto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GNSSCorrectionService_StreamCorrections_FullMethodName = "/coord_correction_v1.GNSSCorrectionService/StreamCorrections"
)

// GNSSCorrectionServiceClient is the client API for GNSSCorrectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GNSSCorrectionServiceClient interface {
	StreamCorrections(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[dto.RoverRequest, dto.CorrectionResponse], error)
}

type gNSSCorrectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGNSSCorrectionServiceClient(cc grpc.ClientConnInterface) GNSSCorrectionServiceClient {
	return &gNSSCorrectionServiceClient{cc}
}

func (c *gNSSCorrectionServiceClient) StreamCorrections(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[dto.RoverRequest, dto.CorrectionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GNSSCorrectionService_ServiceDesc.Streams[0], GNSSCorrectionService_StreamCorrections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[dto.RoverRequest, dto.CorrectionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GNSSCorrectionService_StreamCorrectionsClient = grpc.BidiStreamingClient[dto.RoverRequest, dto.CorrectionResponse]

// GNSSCorrectionServiceServer is the server API for GNSSCorrectionService service.
// All implementations must embed UnimplementedGNSSCorrectionServiceServer
// for forward compatibility.
type GNSSCorrectionServiceServer interface {
	StreamCorrections(grpc.BidiStreamingServer[dto.RoverRequest, dto.CorrectionResponse]) error
	mustEmbedUnimplementedGNSSCorrectionServiceServer()
}

// UnimplementedGNSSCorrectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGNSSCorrectionServiceServer struct{}

func (UnimplementedGNSSCorrectionServiceServer) StreamCorrections(grpc.BidiStreamingServer[dto.RoverRequest, dto.CorrectionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCorrections not implemented")
}
func (UnimplementedGNSSCorrectionServiceServer) mustEmbedUnimplementedGNSSCorrectionServiceServer() {}
func (UnimplementedGNSSCorrectionServiceServer) testEmbeddedByValue()                               {}

// UnsafeGNSSCorrectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GNSSCorrectionServiceServer will
// result in compilation errors.
type UnsafeGNSSCorrectionServiceServer interface {
	mustEmbedUnimplementedGNSSCorrectionServiceServer()
}

func RegisterGNSSCorrectionServiceServer(s grpc.ServiceRegistrar, srv GNSSCorrectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedGNSSCorrectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GNSSCorrectionService_ServiceDesc, srv)
}

func _GNSSCorrectionService_StreamCorrections_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNSSCorrectionServiceServer).StreamCorrections(&grpc.GenericServerStream[dto.RoverRequest, dto.CorrectionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GNSSCorrectionService_StreamCorrectionsServer = grpc.BidiStreamingServer[dto.RoverRequest, dto.CorrectionResponse]

// GNSSCorrectionService_ServiceDesc is the grpc.ServiceDesc for GNSSCorrectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GNSSCorrectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coord_correction_v1.GNSSCorrectionService",
	HandlerType: (*GNSSCorrectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCorrections",
			Handler:       _GNSSCorrectionService_StreamCorrections_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api/coord_correction_v1/coord_correction.proto",
}
