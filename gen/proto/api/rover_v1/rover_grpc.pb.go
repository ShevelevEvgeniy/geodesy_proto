// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/api/rover_v1/rover.proto

package rover_v1

import (
	context "context"
	dto "github.com/ShevelevEvgeniy/geodesy_proto/gen/proto/dto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoverService_RegisterRover_FullMethodName   = "/rover_v1.RoverService/RegisterRover"
	RoverService_DeregisterRover_FullMethodName = "/rover_v1.RoverService/DeregisterRover"
)

// RoverServiceClient is the client API for RoverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoverServiceClient interface {
	RegisterRover(ctx context.Context, in *dto.RegisterRoverRequest, opts ...grpc.CallOption) (*dto.RegisterRoverResponse, error)
	DeregisterRover(ctx context.Context, in *dto.RoverID, opts ...grpc.CallOption) (*dto.DeregisterRoverResponse, error)
}

type roverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoverServiceClient(cc grpc.ClientConnInterface) RoverServiceClient {
	return &roverServiceClient{cc}
}

func (c *roverServiceClient) RegisterRover(ctx context.Context, in *dto.RegisterRoverRequest, opts ...grpc.CallOption) (*dto.RegisterRoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(dto.RegisterRoverResponse)
	err := c.cc.Invoke(ctx, RoverService_RegisterRover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roverServiceClient) DeregisterRover(ctx context.Context, in *dto.RoverID, opts ...grpc.CallOption) (*dto.DeregisterRoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(dto.DeregisterRoverResponse)
	err := c.cc.Invoke(ctx, RoverService_DeregisterRover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoverServiceServer is the server API for RoverService service.
// All implementations must embed UnimplementedRoverServiceServer
// for forward compatibility.
type RoverServiceServer interface {
	RegisterRover(context.Context, *dto.RegisterRoverRequest) (*dto.RegisterRoverResponse, error)
	DeregisterRover(context.Context, *dto.RoverID) (*dto.DeregisterRoverResponse, error)
	mustEmbedUnimplementedRoverServiceServer()
}

// UnimplementedRoverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoverServiceServer struct{}

func (UnimplementedRoverServiceServer) RegisterRover(context.Context, *dto.RegisterRoverRequest) (*dto.RegisterRoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRover not implemented")
}
func (UnimplementedRoverServiceServer) DeregisterRover(context.Context, *dto.RoverID) (*dto.DeregisterRoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterRover not implemented")
}
func (UnimplementedRoverServiceServer) mustEmbedUnimplementedRoverServiceServer() {}
func (UnimplementedRoverServiceServer) testEmbeddedByValue()                      {}

// UnsafeRoverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoverServiceServer will
// result in compilation errors.
type UnsafeRoverServiceServer interface {
	mustEmbedUnimplementedRoverServiceServer()
}

func RegisterRoverServiceServer(s grpc.ServiceRegistrar, srv RoverServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoverService_ServiceDesc, srv)
}

func _RoverService_RegisterRover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.RegisterRoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServiceServer).RegisterRover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoverService_RegisterRover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServiceServer).RegisterRover(ctx, req.(*dto.RegisterRoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoverService_DeregisterRover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.RoverID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServiceServer).DeregisterRover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoverService_DeregisterRover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServiceServer).DeregisterRover(ctx, req.(*dto.RoverID))
	}
	return interceptor(ctx, in, info, handler)
}

// RoverService_ServiceDesc is the grpc.ServiceDesc for RoverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rover_v1.RoverService",
	HandlerType: (*RoverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRover",
			Handler:    _RoverService_RegisterRover_Handler,
		},
		{
			MethodName: "DeregisterRover",
			Handler:    _RoverService_DeregisterRover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/rover_v1/rover.proto",
}
